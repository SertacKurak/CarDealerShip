// <auto-generated />
using System;
using CarDealership.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarDealership.Data.Migrations
{
    [DbContext(typeof(DealershipDbContext))]
    [Migration("20241120205510_AddingVehiclesPart1")]
    partial class AddingVehiclesPart1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarDealership.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CarDealership.Data.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1bd50a85-116c-495a-a6b9-6e95014e7fa7"),
                            Name = "София"
                        },
                        new
                        {
                            Id = new Guid("403fa5e8-1017-472b-875e-26a1ca73cac7"),
                            Name = "Пловдив"
                        },
                        new
                        {
                            Id = new Guid("77b40a00-01f0-44e6-879f-4f0574fcf580"),
                            Name = "Варна"
                        },
                        new
                        {
                            Id = new Guid("bfe70aaf-4328-47dd-9268-df9482a5d555"),
                            Name = "Плевен"
                        },
                        new
                        {
                            Id = new Guid("eac92a26-503b-4218-8b5c-a96a23942a42"),
                            Name = "Бургас"
                        });
                });

            modelBuilder.Entity("CarDealership.Data.Models.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cubage")
                        .HasMaxLength(6000)
                        .HasColumnType("int");

                    b.Property<int>("Doors")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("GearBox")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<int>("HorsePower")
                        .HasMaxLength(800)
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PurposeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Seats")
                        .HasMaxLength(7)
                        .HasColumnType("int");

                    b.Property<int>("TankCapacity")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PurposeId");

                    b.HasIndex("TypeId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bc2d4817-2704-46c9-b7e0-91e40e64064b"),
                            CategoryId = new Guid("89253114-1117-481a-94c8-c93e798c73f3"),
                            Cubage = 5000,
                            Doors = 4,
                            FuelType = "Бензин",
                            GearBox = "Автоматична",
                            HorsePower = 455,
                            ImageUrl = "https://editorial.pxcrush.net/carsales/general/editorial/ge5710401472975685544.jpg?width=1024&height=682",
                            IsDeleted = false,
                            LocationId = new Guid("30b08e92-62de-42f7-b345-aca315dfd54a"),
                            Make = "Mercedes-Benz",
                            Model = "S 500",
                            Price = 80000m,
                            PurposeId = new Guid("5999e3db-7948-47ab-a2b7-2aa0393ad07e"),
                            Seats = 5,
                            TankCapacity = 90,
                            TypeId = new Guid("f6fcc477-d738-4077-b0d0-c5f5fcfdbe68"),
                            Year = "2016"
                        },
                        new
                        {
                            Id = new Guid("2ca127ec-4df8-4091-bd25-de8a6bd43d0e"),
                            CategoryId = new Guid("89253114-1117-481a-94c8-c93e798c73f3"),
                            Cubage = 6000,
                            Doors = 4,
                            FuelType = "Бензин",
                            GearBox = "Автоматична",
                            HorsePower = 609,
                            ImageUrl = "https://a4d540d8508d4f8a94eefc64d221e3d5.objectstore.eu/lot-20087413/1000x0/94a340b554216b7d5753cdc44dc7217c.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("729897ec-6a17-4851-8831-4d2b2d04f064"),
                            Make = "BMW",
                            Model = "760",
                            Price = 180000m,
                            PurposeId = new Guid("5999e3db-7948-47ab-a2b7-2aa0393ad07e"),
                            Seats = 5,
                            TankCapacity = 100,
                            TypeId = new Guid("f6fcc477-d738-4077-b0d0-c5f5fcfdbe68"),
                            Year = "2019"
                        },
                        new
                        {
                            Id = new Guid("967be653-60f4-4b13-9935-f82310868122"),
                            CategoryId = new Guid("89253114-1117-481a-94c8-c93e798c73f3"),
                            Cubage = 3000,
                            Doors = 4,
                            FuelType = "Бензин",
                            GearBox = "Автоматична",
                            HorsePower = 340,
                            ImageUrl = "https://a4d540d8508d4f8a94eefc64d221e3d5.objectstore.eu/ lot-19801563/1000x0/d00867bc670fa9c6fcae88c376ab6628.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("928c42ce-f6cf-4a56-8eb0-08d9bd65f99a"),
                            Make = "Audi",
                            Model = "A8",
                            Price = 90000m,
                            PurposeId = new Guid("5999e3db-7948-47ab-a2b7-2aa0393ad07e"),
                            Seats = 5,
                            TankCapacity = 90,
                            TypeId = new Guid("f6fcc477-d738-4077-b0d0-c5f5fcfdbe68"),
                            Year = "2018"
                        },
                        new
                        {
                            Id = new Guid("e21b23e0-7f17-40c1-94ad-2d578bbc9245"),
                            CategoryId = new Guid("7ae247d2-af02-4d12-8531-aec70481ec82"),
                            Cubage = 2000,
                            Doors = 2,
                            FuelType = "Бензин",
                            GearBox = "Автоматична",
                            HorsePower = 299,
                            ImageUrl = "https://www.inghamdriven.nz/wp-content/files/stockCNM/8098/20538_01.jpg?/  width=2048&optimize=medium",
                            IsDeleted = false,
                            LocationId = new Guid("47c0d9b6-ff78-4c4b-8872-14f12e12f024"),
                            Make = "Mercedes-Benz",
                            Model = "S 350",
                            Price = 100000m,
                            PurposeId = new Guid("5999e3db-7948-47ab-a2b7-2aa0393ad07e"),
                            Seats = 4,
                            TankCapacity = 70,
                            TypeId = new Guid("f6fcc477-d738-4077-b0d0-c5f5fcfdbe68"),
                            Year = "2020"
                        },
                        new
                        {
                            Id = new Guid("9edcbb44-6daf-4954-8652-9a83c5cd3c10"),
                            CategoryId = new Guid("bbcee395-3c50-4b16-8c6b-078997031124"),
                            Cubage = 3800,
                            Doors = 2,
                            FuelType = "Бензин",
                            GearBox = "Автоматична",
                            HorsePower = 560,
                            ImageUrl = "https://www.perfectautocollection.com/imagetag/3466/2/l/Used-2014-  Porsche-911-Turbo-S-1722623538.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("30b08e92-62de-42f7-b345-aca315dfd54a"),
                            Make = "Porsche",
                            Model = "911 Turbo S",
                            Price = 270000m,
                            PurposeId = new Guid("5999e3db-7948-47ab-a2b7-2aa0393ad07e"),
                            Seats = 4,
                            TankCapacity = 80,
                            TypeId = new Guid("f6fcc477-d738-4077-b0d0-c5f5fcfdbe68"),
                            Year = "2014"
                        });
                });

            modelBuilder.Entity("CarDealership.Data.Models.VehicleCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("VehiclesCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("91fc8851-a1d0-48b9-b314-c06cfc3499e7"),
                            Name = "Седан"
                        },
                        new
                        {
                            Id = new Guid("cbdc7f92-d60b-4fec-9226-ca2f69d263be"),
                            Name = "Комби"
                        },
                        new
                        {
                            Id = new Guid("4b660fad-9e5b-4e29-a721-5e81e8fcc111"),
                            Name = "Кабрио"
                        },
                        new
                        {
                            Id = new Guid("f1b0f623-c759-4fe1-b31a-14b46ec26b0f"),
                            Name = "Хечбег"
                        },
                        new
                        {
                            Id = new Guid("b0542f73-7a58-4c2a-8ea3-ef284f6ac23b"),
                            Name = "Ван"
                        },
                        new
                        {
                            Id = new Guid("1eb9ccf2-97dd-4f6e-aa53-8254d2710378"),
                            Name = "Пикап"
                        },
                        new
                        {
                            Id = new Guid("dd5129fd-3fcf-45de-b2d8-4b7267d92422"),
                            Name = "Купе"
                        },
                        new
                        {
                            Id = new Guid("2866aa85-1654-48b6-b9eb-a40c8f664710"),
                            Name = "Джип"
                        },
                        new
                        {
                            Id = new Guid("f621bd9c-272f-4c74-a896-43cac8fc8064"),
                            Name = "Камион"
                        },
                        new
                        {
                            Id = new Guid("de994d07-3656-4964-83d0-d8a0b85681f9"),
                            Name = "Бус"
                        });
                });

            modelBuilder.Entity("CarDealership.Data.Models.VehiclePurpose", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("VehiclesPurposes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("743cfe06-7f22-45ec-88af-b79c3f18c0e8"),
                            Name = "Икономичен"
                        },
                        new
                        {
                            Id = new Guid("56e7cd8e-a2a3-43df-bfe7-7bf703f5cdc0"),
                            Name = "Икономичен Комби"
                        },
                        new
                        {
                            Id = new Guid("af941060-f25b-49c3-802f-90485ee91871"),
                            Name = "Компактен"
                        },
                        new
                        {
                            Id = new Guid("31e05717-6181-4513-b627-c1f350aea82b"),
                            Name = "Стандартен"
                        },
                        new
                        {
                            Id = new Guid("863f3051-91b5-4470-be21-60b681da5782"),
                            Name = "Стандартен Комби"
                        },
                        new
                        {
                            Id = new Guid("566678cc-de96-4d01-8b15-b07f1ece32f1"),
                            Name = "Голям"
                        },
                        new
                        {
                            Id = new Guid("a7a95387-66c9-4c6d-ae02-ed9ce687d202"),
                            Name = "Луксозен"
                        });
                });

            modelBuilder.Entity("CarDealership.Data.Models.VehicleType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("VehiclesTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9f8d2d56-5fd0-4ad2-b2bf-66e8804bd645"),
                            Name = "Автомобил"
                        },
                        new
                        {
                            Id = new Guid("42fffa4c-8cdf-4888-a3b6-beeb0d65d9e8"),
                            Name = "Камион"
                        },
                        new
                        {
                            Id = new Guid("11a2b000-291f-4342-b1c1-6751f2990551"),
                            Name = "Бус"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CarDealership.Data.Models.Vehicle", b =>
                {
                    b.HasOne("CarDealership.Data.Models.VehicleCategory", "VehicleCategory")
                        .WithMany("Vehicles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarDealership.Data.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarDealership.Data.Models.VehiclePurpose", "Purpose")
                        .WithMany("Vehicles")
                        .HasForeignKey("PurposeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarDealership.Data.Models.VehicleType", "VehicleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Purpose");

                    b.Navigation("VehicleCategory");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CarDealership.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CarDealership.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarDealership.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CarDealership.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarDealership.Data.Models.VehicleCategory", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("CarDealership.Data.Models.VehiclePurpose", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("CarDealership.Data.Models.VehicleType", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
