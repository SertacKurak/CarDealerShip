// <auto-generated />
using System;
using CarDealership.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarDealership.Data.Migrations
{
    [DbContext(typeof(DealershipDbContext))]
    [Migration("20241203140511_AddingManager")]
    partial class AddingManager
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarDealership.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CarDealership.Data.Models.ApplicationUserVehicle", b =>
                {
                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationUserId", "VehicleId");

                    b.HasIndex("VehicleId");

                    b.ToTable("UsersVehicles");
                });

            modelBuilder.Entity("CarDealership.Data.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44fc94c2-b239-417a-944e-6f8b8d87e4d2"),
                            Name = "София"
                        },
                        new
                        {
                            Id = new Guid("b02108ee-ff61-434a-8aa3-8e2ac61bbca1"),
                            Name = "Пловдив"
                        },
                        new
                        {
                            Id = new Guid("d35eacf2-b1d0-46bf-8cd1-21eb134c4b2b"),
                            Name = "Варна"
                        },
                        new
                        {
                            Id = new Guid("160b8bc3-fa53-489d-84d4-b46b02863a91"),
                            Name = "Плевен"
                        },
                        new
                        {
                            Id = new Guid("dac01ffe-e539-4dac-9f74-1c7a177cc562"),
                            Name = "Бургас"
                        });
                });

            modelBuilder.Entity("CarDealership.Data.Models.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("CarDealership.Data.Models.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cubage")
                        .HasMaxLength(6000)
                        .HasColumnType("int");

                    b.Property<int>("Doors")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("GearBox")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<int>("HorsePower")
                        .HasMaxLength(800)
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PurposeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Seats")
                        .HasMaxLength(7)
                        .HasColumnType("int");

                    b.Property<int>("TankCapacity")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PurposeId");

                    b.HasIndex("TypeId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5b0ddfa3-1bef-4993-a879-f643a34d374b"),
                            CategoryId = new Guid("bd91bf4e-67a8-40b4-a992-ae31c76df3a1"),
                            Cubage = 1200,
                            Doors = 4,
                            FuelType = "Бензин",
                            GearBox = "Автоматична",
                            HorsePower = 110,
                            ImageUrl = "https://ssl.caranddriving.com/cdwebsite/image169.ashx?url=https://ssl.caranddriving.com/ssl/f2/images/used/big/peugeot2082015to2019.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("ae187b67-abd1-4c1a-8590-6a22c6de4b17"),
                            Make = "Peugeot",
                            Model = "208",
                            Price = 10000m,
                            PurposeId = new Guid("f140b03d-b93a-47e6-a58a-346fad8599ad"),
                            Seats = 5,
                            TankCapacity = 50,
                            TypeId = new Guid("912d4786-5ce9-4dc7-8da8-47ce8fb72bef"),
                            Year = "2015"
                        },
                        new
                        {
                            Id = new Guid("98f82568-0fe5-4e75-87e1-c5688fe42860"),
                            CategoryId = new Guid("bd91bf4e-67a8-40b4-a992-ae31c76df3a1"),
                            Cubage = 1600,
                            Doors = 4,
                            FuelType = "Дизел",
                            GearBox = "Автоматична",
                            HorsePower = 140,
                            ImageUrl = "https://m4.netinfo.bg/media/images/38599/38599839/655-402-renault-cliov-/test-drajv.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("84a3dfe2-4c08-4e18-9156-7452e556c1dd"),
                            Make = "Renault",
                            Model = "Clio",
                            Price = 18000m,
                            PurposeId = new Guid("f140b03d-b93a-47e6-a58a-346fad8599ad"),
                            Seats = 5,
                            TankCapacity = 45,
                            TypeId = new Guid("912d4786-5ce9-4dc7-8da8-47ce8fb72bef"),
                            Year = "2020"
                        },
                        new
                        {
                            Id = new Guid("adac99fc-a75f-4af4-9f1e-3570d67e6017"),
                            CategoryId = new Guid("2fc4c7e6-cad0-4190-95b5-78a7420a1631"),
                            Cubage = 3000,
                            Doors = 4,
                            FuelType = "Дизел",
                            GearBox = "Автоматична",
                            HorsePower = 286,
                            ImageUrl = "https://pictures.dealer.com/r/rockvilleaudiaoa/1813/530e70010e6e34ac80d27f60876ab89ex.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("48141d40-a443-4edf-aa93-80a12db8690e"),
                            Make = "Audi",
                            Model = "Q8",
                            Price = 95000m,
                            PurposeId = new Guid("b5877ed2-bb7a-4a22-be82-6db9308cd2b7"),
                            Seats = 5,
                            TankCapacity = 75,
                            TypeId = new Guid("912d4786-5ce9-4dc7-8da8-47ce8fb72bef"),
                            Year = "2020"
                        },
                        new
                        {
                            Id = new Guid("194ae085-cc33-46c6-923e-c44a5e14d4df"),
                            CategoryId = new Guid("2fc4c7e6-cad0-4190-95b5-78a7420a1631"),
                            Cubage = 3000,
                            Doors = 4,
                            FuelType = "Дизел",
                            GearBox = "Автоматична",
                            HorsePower = 286,
                            ImageUrl = "https://media.ed.edmunds-media.com/audi/q7/2018/oem/2018_audi_q7_4dr-suv_30t-prestige-quattro_fq_oem_1_1600.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("95d16d5b-0edb-46ed-9abc-822545a05860"),
                            Make = "Audi",
                            Model = "Q7",
                            Price = 50000m,
                            PurposeId = new Guid("b5877ed2-bb7a-4a22-be82-6db9308cd2b7"),
                            Seats = 5,
                            TankCapacity = 75,
                            TypeId = new Guid("912d4786-5ce9-4dc7-8da8-47ce8fb72bef"),
                            Year = "2018"
                        },
                        new
                        {
                            Id = new Guid("09ce8f2c-f974-4e36-8093-ce3aa7376cf2"),
                            CategoryId = new Guid("4012cbab-8211-4c37-8566-f73f083e999f"),
                            Cubage = 4000,
                            Doors = 4,
                            FuelType = "Дизел",
                            GearBox = "Автоматична",
                            HorsePower = 400,
                            ImageUrl = "https://www.sherifo.lt/_next/image?url=https%3A%2F%2Fproduction-carloading-api-media.s3.amazonaws.com%2Flot_image%/2F1_S1ptd2M.png.1920x1080_q85.png&w=3840&q=75",
                            IsDeleted = false,
                            LocationId = new Guid("3cb2b945-5fb2-4489-805e-b879154902a6"),
                            Make = "BMW",
                            Model = "750",
                            Price = 90000m,
                            PurposeId = new Guid("b5877ed2-bb7a-4a22-be82-6db9308cd2b7"),
                            Seats = 5,
                            TankCapacity = 80,
                            TypeId = new Guid("912d4786-5ce9-4dc7-8da8-47ce8fb72bef"),
                            Year = "2019"
                        },
                        new
                        {
                            Id = new Guid("a89b2858-ea73-4338-8e02-18d01ae2b008"),
                            CategoryId = new Guid("2fc4c7e6-cad0-4190-95b5-78a7420a1631"),
                            Cubage = 3000,
                            Doors = 4,
                            FuelType = "Дизел",
                            GearBox = "Автоматична",
                            HorsePower = 286,
                            ImageUrl = "https://cdn.dealerspike.com/imglib/v1/800x600/imglib/Assets/Inventory/A6/07/A6070369-F91B-47F8-9FA9-93AEF34C7EB4.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("ae187b67-abd1-4c1a-8590-6a22c6de4b17"),
                            Make = "Audi",
                            Model = "Q7",
                            Price = 55000m,
                            PurposeId = new Guid("b5877ed2-bb7a-4a22-be82-6db9308cd2b7"),
                            Seats = 5,
                            TankCapacity = 75,
                            TypeId = new Guid("912d4786-5ce9-4dc7-8da8-47ce8fb72bef"),
                            Year = "2018"
                        },
                        new
                        {
                            Id = new Guid("60b708ce-d98a-4c51-a39a-05a50fddf989"),
                            CategoryId = new Guid("2fc4c7e6-cad0-4190-95b5-78a7420a1631"),
                            Cubage = 5700,
                            Doors = 4,
                            FuelType = "Бензин",
                            GearBox = "Автоматична",
                            HorsePower = 395,
                            ImageUrl = "https://di-uploads-pod12.dealerinspire.com/universitydodgeram/uploads/2017/11/2018Ram1500_UniversityDodge.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("84a3dfe2-4c08-4e18-9156-7452e556c1dd"),
                            Make = "RAM",
                            Model = "1500",
                            Price = 45000m,
                            PurposeId = new Guid("661d2044-185a-4911-8864-1285c0638e09"),
                            Seats = 6,
                            TankCapacity = 90,
                            TypeId = new Guid("912d4786-5ce9-4dc7-8da8-47ce8fb72bef"),
                            Year = "2018"
                        },
                        new
                        {
                            Id = new Guid("07a52dd4-ba04-448d-80b9-0730a0716a24"),
                            CategoryId = new Guid("2fc4c7e6-cad0-4190-95b5-78a7420a1631"),
                            Cubage = 1500,
                            Doors = 4,
                            FuelType = "Дизел",
                            GearBox = "Автоматична",
                            HorsePower = 116,
                            ImageUrl = "https://www.carpixel.net/w/a38025585b428caf0a5e472b1da228bb/minicooper-/s-countryman-car-wallpaper-101089.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("48141d40-a443-4edf-aa93-80a12db8690e"),
                            Make = "Mini",
                            Model = "Countryman",
                            Price = 18000m,
                            PurposeId = new Guid("f140b03d-b93a-47e6-a58a-346fad8599ad"),
                            Seats = 5,
                            TankCapacity = 50,
                            TypeId = new Guid("912d4786-5ce9-4dc7-8da8-47ce8fb72bef"),
                            Year = "2020"
                        },
                        new
                        {
                            Id = new Guid("5149fb0c-d53e-4ecc-bea2-9d005edbbdd4"),
                            CategoryId = new Guid("2fc4c7e6-cad0-4190-95b5-78a7420a1631"),
                            Cubage = 1500,
                            Doors = 4,
                            FuelType = "Дизел",
                            GearBox = "Автоматична",
                            HorsePower = 116,
                            ImageUrl = "https://www.elcarrocolombiano.com/wp-contentuploads/2020/03/20200304-/RENAULT-DUSTER-2021-PRECIO-CARACTERISTICAS-EN-BRASIL-01.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("95d16d5b-0edb-46ed-9abc-822545a05860"),
                            Make = "Dacia",
                            Model = "Duster",
                            Price = 23000m,
                            PurposeId = new Guid("f140b03d-b93a-47e6-a58a-346fad8599ad"),
                            Seats = 5,
                            TankCapacity = 50,
                            TypeId = new Guid("912d4786-5ce9-4dc7-8da8-47ce8fb72bef"),
                            Year = "2021"
                        },
                        new
                        {
                            Id = new Guid("3cf850a3-2278-4a70-af61-157bc9e9f69a"),
                            CategoryId = new Guid("4012cbab-8211-4c37-8566-f73f083e999f"),
                            Cubage = 1600,
                            Doors = 4,
                            FuelType = "Бензин",
                            GearBox = "Автоматична",
                            HorsePower = 132,
                            ImageUrl = "https://www.avtotachki.com/wp-content/uploads/2020/11/toyota-corolla-2016-1024x685.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("3cb2b945-5fb2-4489-805e-b879154902a6"),
                            Make = "Toyota",
                            Model = "Corolla",
                            Price = 19000m,
                            PurposeId = new Guid("8acdd8a8-ffaa-425d-934e-d13deaea1836"),
                            Seats = 5,
                            TankCapacity = 55,
                            TypeId = new Guid("912d4786-5ce9-4dc7-8da8-47ce8fb72bef"),
                            Year = "2016"
                        },
                        new
                        {
                            Id = new Guid("3c3f2cb0-fb06-4616-8396-3aad20b6d7a6"),
                            CategoryId = new Guid("939d5a93-8d55-4ec3-b3ac-39a36cd1ff29"),
                            Cubage = 2000,
                            Doors = 4,
                            FuelType = "Дизел",
                            GearBox = "Автоматична",
                            HorsePower = 150,
                            ImageUrl = "https://s3.eu-west-2.amazonaws.com/assets.synetiq-auctions.co.uk/images/items/0026/0453805/cmih8vnjwohimemf7dj6fo5yqu6f5fsm9f52025a.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("ae187b67-abd1-4c1a-8590-6a22c6de4b17"),
                            Make = "Citroen",
                            Model = "C5",
                            Price = 16000m,
                            PurposeId = new Guid("8acdd8a8-ffaa-425d-934e-d13deaea1836"),
                            Seats = 5,
                            TankCapacity = 70,
                            TypeId = new Guid("912d4786-5ce9-4dc7-8da8-47ce8fb72bef"),
                            Year = "2016"
                        },
                        new
                        {
                            Id = new Guid("6c57e66b-4ad8-445c-ba76-1408b86ad7fb"),
                            CategoryId = new Guid("bd91bf4e-67a8-40b4-a992-ae31c76df3a1"),
                            Cubage = 1200,
                            Doors = 4,
                            FuelType = "Дизел",
                            GearBox = "Автоматична",
                            HorsePower = 75,
                            ImageUrl = "https://www.avtotachki.com/wp-content/uploads/2020/12/hyundai-i10-2017-1024x640.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("84a3dfe2-4c08-4e18-9156-7452e556c1dd"),
                            Make = "Hyundai",
                            Model = "i10",
                            Price = 10000m,
                            PurposeId = new Guid("f140b03d-b93a-47e6-a58a-346fad8599ad"),
                            Seats = 5,
                            TankCapacity = 40,
                            TypeId = new Guid("912d4786-5ce9-4dc7-8da8-47ce8fb72bef"),
                            Year = "2017"
                        },
                        new
                        {
                            Id = new Guid("3ccb56a9-4a35-4221-be4c-a8757d297461"),
                            CategoryId = new Guid("bd91bf4e-67a8-40b4-a992-ae31c76df3a1"),
                            Cubage = 1200,
                            Doors = 4,
                            FuelType = "Дизел",
                            GearBox = "Автоматична",
                            HorsePower = 75,
                            ImageUrl = "https://www.auto-data.net/images/f11/Hyundai-Grand-i10-facelift-2017.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("48141d40-a443-4edf-aa93-80a12db8690e"),
                            Make = "Hyundai",
                            Model = "i10",
                            Price = 10500m,
                            PurposeId = new Guid("f140b03d-b93a-47e6-a58a-346fad8599ad"),
                            Seats = 5,
                            TankCapacity = 40,
                            TypeId = new Guid("912d4786-5ce9-4dc7-8da8-47ce8fb72bef"),
                            Year = "2017"
                        },
                        new
                        {
                            Id = new Guid("c42c760d-0e3e-4194-a88e-7318a084faab"),
                            CategoryId = new Guid("2fc4c7e6-cad0-4190-95b5-78a7420a1631"),
                            Cubage = 1500,
                            Doors = 4,
                            FuelType = "Дизел",
                            GearBox = "Автоматична",
                            HorsePower = 116,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/c/c2/2018_Dacia_Duster_Comfort_1.6.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("95d16d5b-0edb-46ed-9abc-822545a05860"),
                            Make = "Dacia",
                            Model = "Duster",
                            Price = 25000m,
                            PurposeId = new Guid("f140b03d-b93a-47e6-a58a-346fad8599ad"),
                            Seats = 5,
                            TankCapacity = 50,
                            TypeId = new Guid("912d4786-5ce9-4dc7-8da8-47ce8fb72bef"),
                            Year = "2021"
                        },
                        new
                        {
                            Id = new Guid("204e50c5-56b3-492d-bdcb-e0f4e7cc3e93"),
                            CategoryId = new Guid("5e2e101c-27c9-4b94-b2e8-8f2154a4389b"),
                            Cubage = 13000,
                            Doors = 2,
                            FuelType = "Дизел",
                            GearBox = "Автоматична",
                            HorsePower = 480,
                            ImageUrl = "https://d2e5b8shawuel2.cloudfront.net/vehicle/304240/hlv/original.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("3cb2b945-5fb2-4489-805e-b879154902a6"),
                            Make = "Daf",
                            Model = "XF 480",
                            Price = 85000m,
                            PurposeId = new Guid("661d2044-185a-4911-8864-1285c0638e09"),
                            Seats = 2,
                            TankCapacity = 1100,
                            TypeId = new Guid("f7fa7488-e482-493d-a27c-1f1a7d38f79b"),
                            Year = "2020"
                        },
                        new
                        {
                            Id = new Guid("d3c87fc7-8f2e-4385-88cf-750802a00157"),
                            CategoryId = new Guid("5e2e101c-27c9-4b94-b2e8-8f2154a4389b"),
                            Cubage = 12800,
                            Doors = 2,
                            FuelType = "Дизел",
                            GearBox = "Автоматична",
                            HorsePower = 450,
                            ImageUrl = "https://st.mascus.com/imagetilewm/product/e5a8342d/mercedes-benz-actros-1846-ls,5897e6b7-1.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("ae187b67-abd1-4c1a-8590-6a22c6de4b17"),
                            Make = "Mercedes-Benz",
                            Model = "Actros",
                            Price = 35000m,
                            PurposeId = new Guid("661d2044-185a-4911-8864-1285c0638e09"),
                            Seats = 2,
                            TankCapacity = 900,
                            TypeId = new Guid("f7fa7488-e482-493d-a27c-1f1a7d38f79b"),
                            Year = "2017"
                        },
                        new
                        {
                            Id = new Guid("99ec8db1-b331-452c-a22e-1cb72d05379f"),
                            CategoryId = new Guid("247c145d-9b6d-4315-a68a-f8191b687429"),
                            Cubage = 3000,
                            Doors = 2,
                            FuelType = "Дизел",
                            GearBox = "Автоматична",
                            HorsePower = 180,
                            ImageUrl = "https://d2e5b8shawuel2.cloudfront.net/vehicle/285996/hlv/original.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("84a3dfe2-4c08-4e18-9156-7452e556c1dd"),
                            Make = "Iveco",
                            Model = "35c18",
                            Price = 42000m,
                            PurposeId = new Guid("661d2044-185a-4911-8864-1285c0638e09"),
                            Seats = 3,
                            TankCapacity = 120,
                            TypeId = new Guid("8f40d349-c104-430e-81d4-ab1ba6390187"),
                            Year = "2018"
                        },
                        new
                        {
                            Id = new Guid("f2d53339-77a9-4d2a-a1bd-bd7ab0e07e26"),
                            CategoryId = new Guid("247c145d-9b6d-4315-a68a-f8191b687429"),
                            Cubage = 2200,
                            Doors = 3,
                            FuelType = "Дизел",
                            GearBox = "Ръчна",
                            HorsePower = 163,
                            ImageUrl = "https://d2e5b8shawuel2.cloudfront.net/vehicle/284390/hlv/original.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("48141d40-a443-4edf-aa93-80a12db8690e"),
                            Make = "Mercedes-Benz",
                            Model = "Sprinter 316",
                            Price = 32000m,
                            PurposeId = new Guid("661d2044-185a-4911-8864-1285c0638e09"),
                            Seats = 8,
                            TankCapacity = 100,
                            TypeId = new Guid("8f40d349-c104-430e-81d4-ab1ba6390187"),
                            Year = "2015"
                        },
                        new
                        {
                            Id = new Guid("a80bdd96-7a9e-49c1-be7b-bd7a371051ed"),
                            CategoryId = new Guid("247c145d-9b6d-4315-a68a-f8191b687429"),
                            Cubage = 2300,
                            Doors = 3,
                            FuelType = "Дизел",
                            GearBox = "Ръчна",
                            HorsePower = 143,
                            ImageUrl = "https://ppdobrich.com/uploads/thumbnail/preoborudvan-mikrobus-reno-master-c880x465.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("95d16d5b-0edb-46ed-9abc-822545a05860"),
                            Make = "Renault",
                            Model = "Master",
                            Price = 32000m,
                            PurposeId = new Guid("661d2044-185a-4911-8864-1285c0638e09"),
                            Seats = 17,
                            TankCapacity = 130,
                            TypeId = new Guid("8f40d349-c104-430e-81d4-ab1ba6390187"),
                            Year = "2018"
                        });
                });

            modelBuilder.Entity("CarDealership.Data.Models.VehicleCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("VehiclesCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ad9e126e-a378-4dde-a93b-6576aa826a33"),
                            Name = "Седан"
                        },
                        new
                        {
                            Id = new Guid("956175a8-ed80-4baf-b11b-cc8a8e0607f0"),
                            Name = "Комби"
                        },
                        new
                        {
                            Id = new Guid("e6416c89-8797-43ad-83cf-0edfe89d8ece"),
                            Name = "Кабрио"
                        },
                        new
                        {
                            Id = new Guid("e549d0c4-3d4b-4f50-800e-d3ecf74004b8"),
                            Name = "Хечбег"
                        },
                        new
                        {
                            Id = new Guid("f4c537c8-9453-4a6a-a7b6-4d9be75d45d7"),
                            Name = "Ван"
                        },
                        new
                        {
                            Id = new Guid("4d5bd88e-2c03-4e51-889c-72be9808843a"),
                            Name = "Пикап"
                        },
                        new
                        {
                            Id = new Guid("2dbd3991-701f-4786-8ce5-4c1a80175ea4"),
                            Name = "Купе"
                        },
                        new
                        {
                            Id = new Guid("e3f7ab9d-955d-4722-b5a4-5de3c6aac3df"),
                            Name = "Джип"
                        },
                        new
                        {
                            Id = new Guid("e7479c56-2d1c-440e-b1d3-a8293a2735b9"),
                            Name = "Камион"
                        },
                        new
                        {
                            Id = new Guid("cc285879-063b-42d9-8f22-0a660c65589e"),
                            Name = "Бус"
                        });
                });

            modelBuilder.Entity("CarDealership.Data.Models.VehiclePurpose", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("VehiclesPurposes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8c0c25dd-50e0-4c8d-b48d-38243617ff70"),
                            Name = "Икономичен"
                        },
                        new
                        {
                            Id = new Guid("334d022f-38c8-47ac-bc55-74f094aa507f"),
                            Name = "Икономичен Комби"
                        },
                        new
                        {
                            Id = new Guid("4112f874-b641-4f78-bd69-9f07293a4fe6"),
                            Name = "Компактен"
                        },
                        new
                        {
                            Id = new Guid("6a9b73ee-1f6b-4fe8-9436-5ac89dbafcb7"),
                            Name = "Стандартен"
                        },
                        new
                        {
                            Id = new Guid("63659075-78b0-4936-bb74-685c82aba31a"),
                            Name = "Стандартен Комби"
                        },
                        new
                        {
                            Id = new Guid("ebfef40b-1104-4113-870c-182818f7ce87"),
                            Name = "Голям"
                        },
                        new
                        {
                            Id = new Guid("5c2fb52f-c511-4e54-aa8e-9ed7d44a7a98"),
                            Name = "Луксозен"
                        });
                });

            modelBuilder.Entity("CarDealership.Data.Models.VehicleType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("VehiclesTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc7ce3ee-564a-4cec-983f-2ae6e2050af2"),
                            Name = "Автомобил"
                        },
                        new
                        {
                            Id = new Guid("091c3f68-7b64-4df8-a595-753f1bb854dc"),
                            Name = "Камион"
                        },
                        new
                        {
                            Id = new Guid("de45d1fd-c8c6-4b77-9900-959f1533516b"),
                            Name = "Бус"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CarDealership.Data.Models.ApplicationUserVehicle", b =>
                {
                    b.HasOne("CarDealership.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserVehicles")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarDealership.Data.Models.Vehicle", "Vehicle")
                        .WithMany("VehicleUser")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CarDealership.Data.Models.Manager", b =>
                {
                    b.HasOne("CarDealership.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarDealership.Data.Models.Vehicle", b =>
                {
                    b.HasOne("CarDealership.Data.Models.VehicleCategory", "VehicleCategory")
                        .WithMany("Vehicles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarDealership.Data.Models.Location", "Location")
                        .WithMany("Vehicles")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarDealership.Data.Models.VehiclePurpose", "Purpose")
                        .WithMany("Vehicles")
                        .HasForeignKey("PurposeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarDealership.Data.Models.VehicleType", "VehicleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Purpose");

                    b.Navigation("VehicleCategory");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CarDealership.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CarDealership.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarDealership.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CarDealership.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarDealership.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUserVehicles");
                });

            modelBuilder.Entity("CarDealership.Data.Models.Location", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("CarDealership.Data.Models.Vehicle", b =>
                {
                    b.Navigation("VehicleUser");
                });

            modelBuilder.Entity("CarDealership.Data.Models.VehicleCategory", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("CarDealership.Data.Models.VehiclePurpose", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("CarDealership.Data.Models.VehicleType", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
