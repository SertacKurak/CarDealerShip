// <auto-generated />
using System;
using CarDealership.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarDealership.Data.Migrations
{
    [DbContext(typeof(DealershipDbContext))]
    [Migration("20241120211505_AddingVehiclesPart2")]
    partial class AddingVehiclesPart2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarDealership.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CarDealership.Data.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("16816d60-868c-4033-8db9-17b8df312756"),
                            Name = "София"
                        },
                        new
                        {
                            Id = new Guid("51f71f72-be83-4647-9f31-2a0c9678ab41"),
                            Name = "Пловдив"
                        },
                        new
                        {
                            Id = new Guid("20d54232-8248-4f5a-b166-91ddc047a6bf"),
                            Name = "Варна"
                        },
                        new
                        {
                            Id = new Guid("b98670a5-6319-4fd7-8480-4197734a3a59"),
                            Name = "Плевен"
                        },
                        new
                        {
                            Id = new Guid("15af1d65-a6d5-4b64-b2ff-3cc2638d0beb"),
                            Name = "Бургас"
                        });
                });

            modelBuilder.Entity("CarDealership.Data.Models.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cubage")
                        .HasMaxLength(6000)
                        .HasColumnType("int");

                    b.Property<int>("Doors")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("GearBox")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<int>("HorsePower")
                        .HasMaxLength(800)
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PurposeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Seats")
                        .HasMaxLength(7)
                        .HasColumnType("int");

                    b.Property<int>("TankCapacity")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PurposeId");

                    b.HasIndex("TypeId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2586f04b-e220-460d-b29b-e6503912fe21"),
                            CategoryId = new Guid("a9f48de6-0feb-4b5f-8585-bffac93e5041"),
                            Cubage = 3000,
                            Doors = 4,
                            FuelType = "Дизел",
                            GearBox = "Автоматична",
                            HorsePower = 250,
                            ImageUrl = "https://www.southeastautoshowroom.com/imagetag/1492/main/lUsed-2023Land-Rover-Defender-110-X-1682620154.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("683f4284-6138-4dce-9191-32206dfd442e"),
                            Make = "Land Rover",
                            Model = "Defender",
                            Price = 160000m,
                            PurposeId = new Guid("545e3752-ee3a-42a4-8ad1-c1250e6ba184"),
                            Seats = 5,
                            TankCapacity = 95,
                            TypeId = new Guid("f6fcc477-d738-4077-b0d0-c5f5fcfdbe68"),
                            Year = "2023"
                        },
                        new
                        {
                            Id = new Guid("5b98e28b-20fc-4a25-85c7-e8d437ec42cb"),
                            CategoryId = new Guid("8d5dd07e-cefe-45c2-8266-c28946a99400"),
                            Cubage = 4000,
                            Doors = 4,
                            FuelType = "Бензин",
                            GearBox = "Автоматична",
                            HorsePower = 605,
                            ImageUrl = "https://gtspirit.com/wp-content/uploads/2015/05/Audi-RS6-Avant-2.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("47c0d9b6-ff78-4c4b-8872-14f12e12f024"),
                            Make = "Audi",
                            Model = "RS6",
                            Price = 110000m,
                            PurposeId = new Guid("5999e3db-7948-47ab-a2b7-2aa0393ad07e"),
                            Seats = 5,
                            TankCapacity = 100,
                            TypeId = new Guid("f6fcc477-d738-4077-b0d0-c5f5fcfdbe68"),
                            Year = "2016"
                        },
                        new
                        {
                            Id = new Guid("7564cb09-7a00-4910-ae3d-98fb46d104ea"),
                            CategoryId = new Guid("bbcee395-3c50-4b16-8c6b-078997031124"),
                            Cubage = 4000,
                            Doors = 2,
                            FuelType = "Бензин",
                            GearBox = "Автоматична",
                            HorsePower = 549,
                            ImageUrl = "https://www.carpixel.netw/3606b3152f8facfae42a639f23b09c95bentleycontinental-gt-s-wallpaperhd-109039.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("729897ec-6a17-4851-8831-4d2b2d04f064"),
                            Make = "Bentley",
                            Model = "Continental GT",
                            Price = 470000m,
                            PurposeId = new Guid("5999e3db-7948-47ab-a2b7-2aa0393ad07e"),
                            Seats = 4,
                            TankCapacity = 100,
                            TypeId = new Guid("f6fcc477-d738-4077-b0d0-c5f5fcfdbe68"),
                            Year = "2022"
                        },
                        new
                        {
                            Id = new Guid("decafe98-eea5-4183-a6e6-2f44819364f0"),
                            CategoryId = new Guid("bbcee395-3c50-4b16-8c6b-078997031124"),
                            Cubage = 5200,
                            Doors = 2,
                            FuelType = "Бензин",
                            GearBox = "Автоматична",
                            HorsePower = 639,
                            ImageUrl = "https://www.astonmartinwashingtondc.comimagetag/3371/3lNew-2022Aston-Martin-DBS-Superleggera-1664901853.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("47c0d9b6-ff78-4c4b-8872-14f12e12f024"),
                            Make = "Aston martin",
                            Model = "DBS",
                            Price = 500000m,
                            PurposeId = new Guid("5999e3db-7948-47ab-a2b7-2aa0393ad07e"),
                            Seats = 4,
                            TankCapacity = 120,
                            TypeId = new Guid("f6fcc477-d738-4077-b0d0-c5f5fcfdbe68"),
                            Year = "2022"
                        },
                        new
                        {
                            Id = new Guid("db3b9203-e685-4663-a130-61628aaff828"),
                            CategoryId = new Guid("0e706b47-5378-48e6-b7df-21e2b1d32901"),
                            Cubage = 1600,
                            Doors = 4,
                            FuelType = "Дизел",
                            GearBox = "Ръчна",
                            HorsePower = 120,
                            ImageUrl = "https://static-eu.cargurus.com/images/forsale/2024/09/11/21/37/2018_fiat_talento-pic-8046155731279073145-1024x768.jpeg",
                            IsDeleted = false,
                            LocationId = new Guid("683f4284-6138-4dce-9191-32206dfd442e"),
                            Make = "Fiat",
                            Model = "Talento",
                            Price = 18999m,
                            PurposeId = new Guid("545e3752-ee3a-42a4-8ad1-c1250e6ba184"),
                            Seats = 3,
                            TankCapacity = 70,
                            TypeId = new Guid("8474c958-2f28-47d2-9878-d7eca96ee0d4"),
                            Year = "2017"
                        },
                        new
                        {
                            Id = new Guid("3a29f8f0-b4c9-43c1-a874-995eef2571de"),
                            CategoryId = new Guid("0e706b47-5378-48e6-b7df-21e2b1d32901"),
                            Cubage = 2000,
                            Doors = 4,
                            FuelType = "Дизел",
                            GearBox = "Ръчна",
                            HorsePower = 130,
                            ImageUrl = "https://images.clickdealer.co.uk/vehicles/4175/4175102/large2/92193323.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("729897ec-6a17-4851-8831-4d2b2d04f064"),
                            Make = "Ford",
                            Model = "Transit",
                            Price = 27000m,
                            PurposeId = new Guid("545e3752-ee3a-42a4-8ad1-c1250e6ba184"),
                            Seats = 3,
                            TankCapacity = 90,
                            TypeId = new Guid("8474c958-2f28-47d2-9878-d7eca96ee0d4"),
                            Year = "2019"
                        },
                        new
                        {
                            Id = new Guid("570a87b6-5a67-44b9-a3aa-ae911869bf00"),
                            CategoryId = new Guid("d5a8ece2-9696-42ae-94e5-30319050da93"),
                            Cubage = 13000,
                            Doors = 2,
                            FuelType = "Дизел",
                            GearBox = "Автоматична",
                            HorsePower = 480,
                            ImageUrl = "https://www.truck1.bg/img/Vlekach_DAF_XF_480_FT_EURO_6_ADR-xxl-8235/8235_5044513319890.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("729897ec-6a17-4851-8831-4d2b2d04f064"),
                            Make = "Daf",
                            Model = "XF 408",
                            Price = 88999m,
                            PurposeId = new Guid("545e3752-ee3a-42a4-8ad1-c1250e6ba184"),
                            Seats = 2,
                            TankCapacity = 1200,
                            TypeId = new Guid("372dded3-031b-4892-b74b-7b4853d68603"),
                            Year = "2020"
                        },
                        new
                        {
                            Id = new Guid("86e4450c-48b7-42f7-8739-e9d1efe04a40"),
                            CategoryId = new Guid("94e34e27-1dbd-4d96-b3f2-7bc799cc2853"),
                            Cubage = 2200,
                            Doors = 4,
                            FuelType = "Дизел",
                            GearBox = "Ръчка",
                            HorsePower = 150,
                            ImageUrl = "https://abstoragev4.blob.core.windows.net/auctions/39678/cars/medium/39678-1_ex.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("30b08e92-62de-42f7-b345-aca315dfd54a"),
                            Make = "Ford",
                            Model = "Ranger",
                            Price = 27000m,
                            PurposeId = new Guid("e1a23bd8-ca1f-43f1-a73e-63dbd887fc20"),
                            Seats = 5,
                            TankCapacity = 80,
                            TypeId = new Guid("f6fcc477-d738-4077-b0d0-c5f5fcfdbe68"),
                            Year = "2012"
                        },
                        new
                        {
                            Id = new Guid("c2c44164-8c3f-42a4-bc46-5ecfa68bae6f"),
                            CategoryId = new Guid("e091f5bb-8030-47c1-bf33-4856df0d905e"),
                            Cubage = 1600,
                            Doors = 2,
                            FuelType = "Дизел",
                            GearBox = "Ръчна",
                            HorsePower = 92,
                            ImageUrl = "https://wallpapers.com/images/hd/caption-stylish-citroen-berlingo-onthe-/open-road-r6rrgptqhdh95zwh.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("729897ec-6a17-4851-8831-4d2b2d04f064"),
                            Make = "Citroen",
                            Model = "Berlingo",
                            Price = 9000m,
                            PurposeId = new Guid("e1a23bd8-ca1f-43f1-a73e-63dbd887fc20"),
                            Seats = 2,
                            TankCapacity = 60,
                            TypeId = new Guid("f6fcc477-d738-4077-b0d0-c5f5fcfdbe68"),
                            Year = "2014"
                        },
                        new
                        {
                            Id = new Guid("34ba1ea9-ef61-4572-a2df-38953c40a660"),
                            CategoryId = new Guid("8d5dd07e-cefe-45c2-8266-c28946a99400"),
                            Cubage = 2000,
                            Doors = 4,
                            FuelType = "Бензин",
                            GearBox = "Автоматична",
                            HorsePower = 210,
                            ImageUrl = "https://imgr1.auto-motor-und-sport.de/Audi-A4-Avant-1-8-TFSIreact169Big-/f606376d-384773.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("47c0d9b6-ff78-4c4b-8872-14f12e12f024"),
                            Make = "Audi",
                            Model = "A4",
                            Price = 1100m,
                            PurposeId = new Guid("edd96e69-2979-4813-99c3-5ede5304d595"),
                            Seats = 5,
                            TankCapacity = 70,
                            TypeId = new Guid("f6fcc477-d738-4077-b0d0-c5f5fcfdbe68"),
                            Year = "2010"
                        });
                });

            modelBuilder.Entity("CarDealership.Data.Models.VehicleCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("VehiclesCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7c4874a7-4e1e-4c51-a4b5-c2a28b25db97"),
                            Name = "Седан"
                        },
                        new
                        {
                            Id = new Guid("e07f8310-dfb5-4f3c-8b34-eed66d42e79b"),
                            Name = "Комби"
                        },
                        new
                        {
                            Id = new Guid("51b992e7-3832-4390-9a19-967252d3dbc2"),
                            Name = "Кабрио"
                        },
                        new
                        {
                            Id = new Guid("04461cbb-e13d-4c72-ad02-1d47784f82b5"),
                            Name = "Хечбег"
                        },
                        new
                        {
                            Id = new Guid("33e550dd-0cb0-4c84-8005-05ba26810561"),
                            Name = "Ван"
                        },
                        new
                        {
                            Id = new Guid("391431f5-4625-40de-b9d9-ab4a3059f443"),
                            Name = "Пикап"
                        },
                        new
                        {
                            Id = new Guid("4a9564dd-54b3-4355-a6a6-91e5b69eabd3"),
                            Name = "Купе"
                        },
                        new
                        {
                            Id = new Guid("4b73efbc-48a2-42e8-a0ff-f930e64a2be4"),
                            Name = "Джип"
                        },
                        new
                        {
                            Id = new Guid("7abe18c0-3858-41a2-bcb3-3a27554a3481"),
                            Name = "Камион"
                        },
                        new
                        {
                            Id = new Guid("16baa931-de16-4945-92bc-4bd414519bea"),
                            Name = "Бус"
                        });
                });

            modelBuilder.Entity("CarDealership.Data.Models.VehiclePurpose", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("VehiclesPurposes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f567aea6-f2f3-4b2d-b43b-0827a95e2e35"),
                            Name = "Икономичен"
                        },
                        new
                        {
                            Id = new Guid("3ed40974-01d6-4092-8fb2-a185c39e8a49"),
                            Name = "Икономичен Комби"
                        },
                        new
                        {
                            Id = new Guid("e88b27fb-ccbe-44b4-ad13-5251caf5839e"),
                            Name = "Компактен"
                        },
                        new
                        {
                            Id = new Guid("cafb9ad6-97ed-4ea1-a055-0232ad669fcd"),
                            Name = "Стандартен"
                        },
                        new
                        {
                            Id = new Guid("9a495692-126a-4e44-a5ff-768485daf18d"),
                            Name = "Стандартен Комби"
                        },
                        new
                        {
                            Id = new Guid("95e36fdf-6202-4b5b-a2fe-d3bd0b584290"),
                            Name = "Голям"
                        },
                        new
                        {
                            Id = new Guid("3066113d-fd3b-4d93-b3cf-f727e386deed"),
                            Name = "Луксозен"
                        });
                });

            modelBuilder.Entity("CarDealership.Data.Models.VehicleType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("VehiclesTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c3b6ddd2-0241-4768-a57c-37c11867b81f"),
                            Name = "Автомобил"
                        },
                        new
                        {
                            Id = new Guid("df0add74-4aff-4166-9499-63f7c4010f74"),
                            Name = "Камион"
                        },
                        new
                        {
                            Id = new Guid("dfe8e883-a4f7-4ba5-8ee2-f2c2fac36c32"),
                            Name = "Бус"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CarDealership.Data.Models.Vehicle", b =>
                {
                    b.HasOne("CarDealership.Data.Models.VehicleCategory", "VehicleCategory")
                        .WithMany("Vehicles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarDealership.Data.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarDealership.Data.Models.VehiclePurpose", "Purpose")
                        .WithMany("Vehicles")
                        .HasForeignKey("PurposeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarDealership.Data.Models.VehicleType", "VehicleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Purpose");

                    b.Navigation("VehicleCategory");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CarDealership.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CarDealership.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarDealership.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CarDealership.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarDealership.Data.Models.VehicleCategory", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("CarDealership.Data.Models.VehiclePurpose", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("CarDealership.Data.Models.VehicleType", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
