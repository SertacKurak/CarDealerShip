// <auto-generated />
using System;
using CarDealership.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarDealership.Data.Migrations
{
    [DbContext(typeof(DealershipDbContext))]
    [Migration("20241125174140_SeedVehiclesPart1")]
    partial class SeedVehiclesPart1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarDealership.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CarDealership.Data.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d5c360a8-d6d0-42fb-9d34-bb8032a29dda"),
                            Name = "София"
                        },
                        new
                        {
                            Id = new Guid("97faaeb0-c9c1-4059-9db0-785b31a32438"),
                            Name = "Пловдив"
                        },
                        new
                        {
                            Id = new Guid("a5360614-5332-4a75-baf8-e9ec3032ec1c"),
                            Name = "Варна"
                        },
                        new
                        {
                            Id = new Guid("4226f2a9-e65e-4be6-b603-e3d7415be4f1"),
                            Name = "Плевен"
                        },
                        new
                        {
                            Id = new Guid("3c67f105-f6a8-489e-81ff-d27353e6d810"),
                            Name = "Бургас"
                        });
                });

            modelBuilder.Entity("CarDealership.Data.Models.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cubage")
                        .HasMaxLength(6000)
                        .HasColumnType("int");

                    b.Property<int>("Doors")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("GearBox")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<int>("HorsePower")
                        .HasMaxLength(800)
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PurposeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Seats")
                        .HasMaxLength(7)
                        .HasColumnType("int");

                    b.Property<int>("TankCapacity")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PurposeId");

                    b.HasIndex("TypeId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f140489d-c0b6-42a8-a1d5-f5fa76e1e508"),
                            CategoryId = new Guid("4012cbab-8211-4c37-8566-f73f083e999f"),
                            Cubage = 5000,
                            Doors = 4,
                            FuelType = "Бензин",
                            GearBox = "Автоматична",
                            HorsePower = 455,
                            ImageUrl = "https://editorial.pxcrush.net/carsales/general/editorial/ge5710401472975685544.jpg?width=1024&height=682",
                            IsDeleted = false,
                            LocationId = new Guid("ae187b67-abd1-4c1a-8590-6a22c6de4b17"),
                            Make = "Mercedes-Benz",
                            Model = "S 500",
                            Price = 80000m,
                            PurposeId = new Guid("b5877ed2-bb7a-4a22-be82-6db9308cd2b7"),
                            Seats = 5,
                            TankCapacity = 90,
                            TypeId = new Guid("912d4786-5ce9-4dc7-8da8-47ce8fb72bef"),
                            Year = "2016"
                        },
                        new
                        {
                            Id = new Guid("09f490ca-6410-4a2c-8c0b-8126deb481d9"),
                            CategoryId = new Guid("4012cbab-8211-4c37-8566-f73f083e999f"),
                            Cubage = 6000,
                            Doors = 4,
                            FuelType = "Бензин",
                            GearBox = "Автоматична",
                            HorsePower = 609,
                            ImageUrl = "https://a4d540d8508d4f8a94eefc64d221e3d5.objectstore.eu/lot-20087413/1000x0/94a340b554216b7d5753cdc44dc7217c.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("84a3dfe2-4c08-4e18-9156-7452e556c1dd"),
                            Make = "BMW",
                            Model = "760",
                            Price = 180000m,
                            PurposeId = new Guid("b5877ed2-bb7a-4a22-be82-6db9308cd2b7"),
                            Seats = 5,
                            TankCapacity = 100,
                            TypeId = new Guid("912d4786-5ce9-4dc7-8da8-47ce8fb72bef"),
                            Year = "2019"
                        },
                        new
                        {
                            Id = new Guid("238de9b6-279e-4488-ae1e-89b0098edccf"),
                            CategoryId = new Guid("4012cbab-8211-4c37-8566-f73f083e999f"),
                            Cubage = 3000,
                            Doors = 4,
                            FuelType = "Бензин",
                            GearBox = "Автоматична",
                            HorsePower = 340,
                            ImageUrl = "https://a4d540d8508d4f8a94eefc64d221e3d5.objectstore.eu/lot-19801563/1000x0/d00867bc670fa9c6fcae88c376ab6628.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("48141d40-a443-4edf-aa93-80a12db8690e"),
                            Make = "Audi",
                            Model = "A8",
                            Price = 90000m,
                            PurposeId = new Guid("b5877ed2-bb7a-4a22-be82-6db9308cd2b7"),
                            Seats = 5,
                            TankCapacity = 90,
                            TypeId = new Guid("912d4786-5ce9-4dc7-8da8-47ce8fb72bef"),
                            Year = "2018"
                        },
                        new
                        {
                            Id = new Guid("d851b2b2-9786-42e3-adab-90c8cb87a138"),
                            CategoryId = new Guid("37545039-ea1a-4970-8a41-abe0005291fd"),
                            Cubage = 2000,
                            Doors = 2,
                            FuelType = "Бензин",
                            GearBox = "Автоматична",
                            HorsePower = 299,
                            ImageUrl = "https://static.auctionauto.com.ua/images/image.autowini.com/AUTOWINI4/UploadImage/Thumb/202206/20/CI202206200001520806/1655653021563_1024.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("95d16d5b-0edb-46ed-9abc-822545a05860"),
                            Make = "Mercedes-Benz",
                            Model = "S 350",
                            Price = 100000m,
                            PurposeId = new Guid("b5877ed2-bb7a-4a22-be82-6db9308cd2b7"),
                            Seats = 4,
                            TankCapacity = 70,
                            TypeId = new Guid("912d4786-5ce9-4dc7-8da8-47ce8fb72bef"),
                            Year = "2020"
                        },
                        new
                        {
                            Id = new Guid("427fd628-b2b6-405c-a6fb-bcd500a3ffd9"),
                            CategoryId = new Guid("37545039-ea1a-4970-8a41-abe0005291fd"),
                            Cubage = 3800,
                            Doors = 2,
                            FuelType = "Бензин",
                            GearBox = "Автоматична",
                            HorsePower = 560,
                            ImageUrl = "https://www.perfectautocollection.com/imagetag/3466/2/l/Used-2014-Porsche-911-Turbo-S-1722623538.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("3cb2b945-5fb2-4489-805e-b879154902a6"),
                            Make = "Porsche",
                            Model = "911 Turbo S",
                            Price = 270000m,
                            PurposeId = new Guid("b5877ed2-bb7a-4a22-be82-6db9308cd2b7"),
                            Seats = 4,
                            TankCapacity = 80,
                            TypeId = new Guid("912d4786-5ce9-4dc7-8da8-47ce8fb72bef"),
                            Year = "2014"
                        },
                        new
                        {
                            Id = new Guid("abd1d814-d632-4ce7-a367-b0c527fb1941"),
                            CategoryId = new Guid("37545039-ea1a-4970-8a41-abe0005291fd"),
                            Cubage = 3000,
                            Doors = 4,
                            FuelType = "Дизел",
                            GearBox = "Автоматична",
                            HorsePower = 250,
                            ImageUrl = "https://www.southeastautoshowroom.com/imagetag/1492/mainlUsed-2023Land-/Rover-Defender-110-X-1682620154.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("ae187b67-abd1-4c1a-8590-6a22c6de4b17"),
                            Make = "Land Rover",
                            Model = "Defender",
                            Price = 160000m,
                            PurposeId = new Guid("661d2044-185a-4911-8864-1285c0638e09"),
                            Seats = 5,
                            TankCapacity = 95,
                            TypeId = new Guid("912d4786-5ce9-4dc7-8da8-47ce8fb72bef"),
                            Year = "2023"
                        },
                        new
                        {
                            Id = new Guid("9a4b8516-7536-4f68-95eb-259354cb47f2"),
                            CategoryId = new Guid("939d5a93-8d55-4ec3-b3ac-39a36cd1ff29"),
                            Cubage = 4000,
                            Doors = 4,
                            FuelType = "Бензин",
                            GearBox = "Автоматична",
                            HorsePower = 605,
                            ImageUrl = "https://gtspirit.com/wp-content/uploads/2015/05/Audi-RS6-Avant-2.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("84a3dfe2-4c08-4e18-9156-7452e556c1dd"),
                            Make = "Audi",
                            Model = "RS6",
                            Price = 110000m,
                            PurposeId = new Guid("b5877ed2-bb7a-4a22-be82-6db9308cd2b7"),
                            Seats = 5,
                            TankCapacity = 100,
                            TypeId = new Guid("912d4786-5ce9-4dc7-8da8-47ce8fb72bef"),
                            Year = "2016"
                        },
                        new
                        {
                            Id = new Guid("19f498b3-ec25-4a68-a65f-fc6262e11c7b"),
                            CategoryId = new Guid("37545039-ea1a-4970-8a41-abe0005291fd"),
                            Cubage = 4000,
                            Doors = 2,
                            FuelType = "Бензин",
                            GearBox = "Автоматична",
                            HorsePower = 549,
                            ImageUrl = "https://www.carpixel.netw/3606b3152f8facfae42a639f23b09c95bentleycontinental-gt-s-wallpaperhd-109039.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("48141d40-a443-4edf-aa93-80a12db8690e"),
                            Make = "Bentley",
                            Model = "Continental GT",
                            Price = 470000m,
                            PurposeId = new Guid("b5877ed2-bb7a-4a22-be82-6db9308cd2b7"),
                            Seats = 4,
                            TankCapacity = 100,
                            TypeId = new Guid("912d4786-5ce9-4dc7-8da8-47ce8fb72bef"),
                            Year = "2022"
                        },
                        new
                        {
                            Id = new Guid("0af30cc4-cc9f-4ee3-aa86-711f7c30345e"),
                            CategoryId = new Guid("37545039-ea1a-4970-8a41-abe0005291fd"),
                            Cubage = 5200,
                            Doors = 2,
                            FuelType = "Бензин",
                            GearBox = "Автоматична",
                            HorsePower = 639,
                            ImageUrl = "https://www.astonmartinwashingtondc.comimagetag/3371/3lNew-2022Aston-Martin-DBS-Superleggera-1664901853.jpg",
                            IsDeleted = false,
                            LocationId = new Guid("95d16d5b-0edb-46ed-9abc-822545a05860"),
                            Make = "Aston martin",
                            Model = "DBS",
                            Price = 500000m,
                            PurposeId = new Guid("b5877ed2-bb7a-4a22-be82-6db9308cd2b7"),
                            Seats = 4,
                            TankCapacity = 120,
                            TypeId = new Guid("912d4786-5ce9-4dc7-8da8-47ce8fb72bef"),
                            Year = "2022"
                        },
                        new
                        {
                            Id = new Guid("71b3ad65-17cf-48ac-9e67-808b897978a7"),
                            CategoryId = new Guid("247c145d-9b6d-4315-a68a-f8191b687429"),
                            Cubage = 1600,
                            Doors = 4,
                            FuelType = "Дизел",
                            GearBox = "Ръчна",
                            HorsePower = 120,
                            ImageUrl = "https://static-eu.cargurus.com/images/forsale/2024/09/11/21/37/2018_fiat_talento-pic-8046155731279073145-1024x768.jpeg",
                            IsDeleted = false,
                            LocationId = new Guid("3cb2b945-5fb2-4489-805e-b879154902a6"),
                            Make = "Fiat",
                            Model = "Talento",
                            Price = 18999m,
                            PurposeId = new Guid("661d2044-185a-4911-8864-1285c0638e09"),
                            Seats = 3,
                            TankCapacity = 70,
                            TypeId = new Guid("8f40d349-c104-430e-81d4-ab1ba6390187"),
                            Year = "2017"
                        });
                });

            modelBuilder.Entity("CarDealership.Data.Models.VehicleCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("VehiclesCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7144f537-dad2-4533-a1b9-70041bd0bd79"),
                            Name = "Седан"
                        },
                        new
                        {
                            Id = new Guid("e7710bb2-3ae3-4ecb-9fb0-013214333390"),
                            Name = "Комби"
                        },
                        new
                        {
                            Id = new Guid("a79bca34-8d14-42f0-8e97-0473739c71f2"),
                            Name = "Кабрио"
                        },
                        new
                        {
                            Id = new Guid("39a4cd12-d585-49d8-b4f4-0692c63e3d5d"),
                            Name = "Хечбег"
                        },
                        new
                        {
                            Id = new Guid("50df17e6-c6dc-492f-9221-2380ca36f1cc"),
                            Name = "Ван"
                        },
                        new
                        {
                            Id = new Guid("02570780-61f1-4a9e-8cb0-4b7d59cf5b33"),
                            Name = "Пикап"
                        },
                        new
                        {
                            Id = new Guid("9f6c16f4-5a83-42e0-9e75-ee0535e17f7a"),
                            Name = "Купе"
                        },
                        new
                        {
                            Id = new Guid("72c9c754-330e-4a3c-a344-bf104e88965d"),
                            Name = "Джип"
                        },
                        new
                        {
                            Id = new Guid("7d490b37-1068-45d5-84e9-9ee3a0396675"),
                            Name = "Камион"
                        },
                        new
                        {
                            Id = new Guid("a40d6950-e372-445b-9cd5-ec7506c9db57"),
                            Name = "Бус"
                        });
                });

            modelBuilder.Entity("CarDealership.Data.Models.VehiclePurpose", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("VehiclesPurposes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe4235d5-8910-4104-8cb1-1f7ed1e77b91"),
                            Name = "Икономичен"
                        },
                        new
                        {
                            Id = new Guid("d6a8af74-7b12-4a3c-8d6d-635a801664b0"),
                            Name = "Икономичен Комби"
                        },
                        new
                        {
                            Id = new Guid("53844346-83fa-45e9-9622-a3ba025f79f9"),
                            Name = "Компактен"
                        },
                        new
                        {
                            Id = new Guid("76b29a32-2833-411f-a2c3-617f7c7f1c00"),
                            Name = "Стандартен"
                        },
                        new
                        {
                            Id = new Guid("b8d2c79c-477b-40a7-9790-49bf7ba52023"),
                            Name = "Стандартен Комби"
                        },
                        new
                        {
                            Id = new Guid("3484c3ca-0cbc-4ead-ad7e-54f4023e7b3b"),
                            Name = "Голям"
                        },
                        new
                        {
                            Id = new Guid("4b60ee7b-ff48-4efd-9f1b-322263523d3d"),
                            Name = "Луксозен"
                        });
                });

            modelBuilder.Entity("CarDealership.Data.Models.VehicleType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("VehiclesTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("67a307e9-810e-43f7-8872-dfbfbb3f921c"),
                            Name = "Автомобил"
                        },
                        new
                        {
                            Id = new Guid("00becb12-cfef-4f4b-8078-d8145b45a268"),
                            Name = "Камион"
                        },
                        new
                        {
                            Id = new Guid("ecacee26-184d-407e-943f-47cbcdae27d1"),
                            Name = "Бус"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CarDealership.Data.Models.Vehicle", b =>
                {
                    b.HasOne("CarDealership.Data.Models.VehicleCategory", "VehicleCategory")
                        .WithMany("Vehicles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarDealership.Data.Models.Location", "Location")
                        .WithMany("Vehicles")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarDealership.Data.Models.VehiclePurpose", "Purpose")
                        .WithMany("Vehicles")
                        .HasForeignKey("PurposeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarDealership.Data.Models.VehicleType", "VehicleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Purpose");

                    b.Navigation("VehicleCategory");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CarDealership.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CarDealership.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarDealership.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CarDealership.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarDealership.Data.Models.Location", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("CarDealership.Data.Models.VehicleCategory", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("CarDealership.Data.Models.VehiclePurpose", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("CarDealership.Data.Models.VehicleType", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
